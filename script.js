class Character {
  constructor(builder) {
    this.race = builder.race
    this.name = builder.name
    this.height = builder.height
    this.weight = builder.weight
    this.age = builder.age
    this.health = builder.health
    this.maxHealth = builder.health
    this.strength = builder.strength
    this.weapon = null
    this.armor = {
      helmet: null,
      chestplate: null,
      pants: null,
    }
    this.totalArmor = 0
  }
  putOnArmor(armorType, armorPiece) {
    this.armor[armorType] = armorPiece
    this.calculateTotalArmor()
    console.log(
      `${this.name} –Ω–∞–¥–µ–ª ${armorPiece.name} [+${armorPiece.defense} –µ–¥–∏–Ω–∏—Ü –∑–∞—â–∏—Ç—ã]`
    )
  }

  calculateTotalArmor() {
    this.totalArmor = Object.values(this.armor)
      .filter((item) => item !== null)
      .reduce((total, armor) => total + armor.defense, 0)

    console.log(`${this.name} –æ–±—â–∞—è –∑–∞—â–∏—Ç–∞: ${this.totalArmor}`)
  }

  takeWeapon(weapon) {
    this.weapon = weapon
    console.log(
      `${this.name} –≤–∑—è–ª –æ—Ä—É–∂–∏–µ ${weapon.name} [–£—Ä–æ–Ω: ${weapon.damage}]`
    )
  }
  attack(target) {
    if (!this.isAlive() || !target.isAlive()) return

    // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω = —Å–∏–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ + —É—Ä–æ–Ω –æ—Ä—É–∂–∏—è
    const baseDamage = this.strength + this.weapon.damage

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω = –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω - –∑–∞—â–∏—Ç–∞ —Ü–µ–ª–∏ (–º–∏–Ω–∏–º—É–º 1 —É—Ä–æ–Ω)
    const finalDamage = Math.max(baseDamage - target.totalArmor, 1)

    // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
    target.health -= finalDamage

    console.log(`‚öîÔ∏è ${this.name} –∞—Ç–∞–∫—É–µ—Ç ${target.name}`)
    console.log(
      `–£—Ä–æ–Ω: ${this.strength} (—Å–∏–ª–∞) + ${this.weapon.damage} (${this.weapon.name}) = ${baseDamage}`
    )
    console.log(`–ë—Ä–æ–Ω—è –±–ª–æ–∫–∏—Ä—É–µ—Ç: ${target.totalArmor}`)
    console.log(`${target.name} –ø–æ–ª—É—á–∞–µ—Ç ${finalDamage} —É—Ä–æ–Ω–∞`)
    console.log(
      `–ó–¥–æ—Ä–æ–≤—å–µ ${target.name}: ${Math.max(target.health, 0)}/${
        target.maxHealth
      }`
    )

    if (!target.isAlive()) {
      console.log(`üíÄ ${target.name} —É–º–µ—Ä –≤ –±–æ—é`)
    }
    console.log(`---`)
  }

  isAlive() {
    return this.health > 0
  }
}

class CharacterBuilder {
  // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  constructor(race, name) {
    this.race = race
    this.name = name
    this.height = 170
    this.weight = 70
    this.age = 25
    this.health = 100
    this.strength = 10
  }

  setHeight(height) {
    this.height = height
    return this
  }

  setWeight(weight) {
    this.weight = weight
    return this
  }

  setAge(age) {
    this.age = age
    return this
  }

  setHealth(health) {
    this.health = health
    return this
  }

  setStrength(strength) {
    this.strength = strength
    return this
  }

  build() {
    return new Character(this)
  }
}

class Orc extends Character {
  constructor(name) {
    super(
      new CharacterBuilder('–û—Ä–∫', name)
        .setHeight(180)
        .setWeight(90)
        .setAge(30)
        .setHealth(120)
        .setStrength(14)
    )
  }
}

class Dward extends Character {
  constructor(name) {
    super(
      new CharacterBuilder('–ì–Ω–æ–º', name)
        .setHeight(120)
        .setWeight(60)
        .setAge(150)
        .setHealth(105)
        .setStrength(18)
    )
  }
}

class Human extends Character {
  constructor(name) {
    super(
      new CharacterBuilder('–ß–µ–ª–æ–≤–µ–∫', name)
        .setHeight(175)
        .setWeight(75)
        .setAge(25)
        .setHealth(100)
        .setStrength(14)
    )
  }
}

class Elf extends Character {
  constructor(name) {
    super(
      new CharacterBuilder('–≠–ª—å—Ñ', name)
        .setHeight(185)
        .setWeight(65)
        .setAge(200)
        .setHealth(80)
        .setStrength(16)
    )
  }
}

class Helmet {
  constructor() {
    this.type = 'helmet'
    this.defense = 3
    this.name = '–®–ª–µ–º'
  }
}

class Chestplate {
  constructor() {
    this.type = 'chestplate'
    this.defense = 5
    this.name = '–ù–∞–≥—Ä—É–¥–Ω–∏–∫'
  }
}

class Pants {
  constructor() {
    this.type = 'pants'
    this.defense = 2
    this.name = '–®—Ç–∞–Ω—ã'
  }
}
class Sword {
  constructor() {
    this.name = '–ú–µ—á'
    this.damage = 12
  }
}

class Halberd {
  constructor() {
    this.name = '–ê–ª–µ–±–∞—Ä–¥–∞'
    this.damage = 16
  }
}

function battleRoyale(characters) {
  console.log('–ù–ê–ß–ê–õ–û –ö–û–†–û–õ–ï–í–°–ö–û–ô –ë–ò–¢–í–´!')
  console.log('====================')

  let round = 0
  const aliveCharacters = [...characters]

  while (aliveCharacters.length > 1) {
    round++
    console.log(`\n –†–ê–£–ù–î ${round}`)
    console.log('–ñ–∏–≤—ã–µ –±–æ–π—Ü—ã: ' + aliveCharacters.map((c) => c.name).join(', '))

    for (let i = 0; i < aliveCharacters.length; i++) {
      const attacker = aliveCharacters[i]

      for (let j = 0; j < aliveCharacters.length; j++) {
        if (i !== j) {
          const target = aliveCharacters[j]
          if (attacker.isAlive() && target.isAlive()) {
            attacker.attack(target)
          }
        }
      }
    }

    for (let i = aliveCharacters.length - 1; i >= 0; i--) {
      if (!aliveCharacters[i].isAlive()) {
        console.log(`${aliveCharacters[i].name} –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –±–∏—Ç–≤—ã`)
        aliveCharacters.splice(i, 1)
      }
    }

    if (aliveCharacters.length === 1) break
  }

  if (aliveCharacters.length === 1) {
    console.log(`\n –ü–û–ë–ï–î–ò–¢–ï–õ–¨ - ${aliveCharacters[0].name}!`)
    console.log(
      `${aliveCharacters[0].name} –≤—ã–∂–∏–ª —Å ${aliveCharacters[0].health} HP`
    )
  } else {
    console.log('\n –ù–∏—á—å—è, –≤—Å–µ –º–µ—Ä—Ç–≤—ã')
  }
}

const boby = new Orc('–ë–æ–±–∏')
const dory = new Dward('–î–æ—Ä–∏')
const benny = new Human('–ë—ç–Ω–Ω–∏')
const evi = new Elf('–≠–≤–∏')

const sword = new Sword()
const halberd = new Halberd()

const helmet = new Helmet()
const chestplate = new Chestplate()
const pants = new Pants()

console.log('–≠–ö–ò–ü–ò–†–û–í–ö–ê:')

boby.putOnArmor('helmet', helmet)
boby.putOnArmor('chestplate', chestplate)
boby.putOnArmor('pants', pants)
boby.takeWeapon(halberd)

dory.putOnArmor('chestplate', chestplate)
dory.takeWeapon(sword)

benny.putOnArmor('helmet', helmet)
benny.putOnArmor('chestplate', chestplate)
benny.putOnArmor('pants', pants)
benny.takeWeapon(sword)

evi.putOnArmor('helmet', helmet)
evi.takeWeapon(sword)

battleRoyale([boby, dory, benny, evi])
